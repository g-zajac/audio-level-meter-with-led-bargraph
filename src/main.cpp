#include <Arduino.h>

// code genrated with Audio System Design Tool for Teensy Audio Library
// www.pjrc.com/teensy/gui

#include <Audio.h>
// NOTE are the libraries below needed?
// #include <Wire.h>
// #include <SPI.h>
// #include <SD.h>
// #include <SerialFlash.h>

// GUItool: begin automatically generated code
AudioInputAnalog         adc1;           //xy=320,151
AudioAnalyzeFFT1024      fft1024_1;      //xy=496,151
AudioConnection          patchCord1(adc1, fft1024_1);
// GUItool: end automatically generated code

// ---- end of code generated by the Audio System Design Tool

// AudioConnection objects do not have any functions.
// They are simply created in your sketch, after the audio objects, to define the data flow between those objects.

// some variables
float magnitude = 0;
float dB;

// for fft 1024 the frequency resolution is 43Hz, 43 * 512 = 20016Hz
// coefficients calculated in a python script with formula: https://en.wikipedia.org/wiki/A-weighting
// to run the script: python a-weight/a-curve-gen.py > a-weight/a-curve.txt
float a_weighting_curve[512] = {
    0.017544178017591977, 0.06831172987613944, 0.1288918917672441, 0.18964362377205973, 0.24775740840935295, 0.3025113104617472, 0.3537470293428846, 0.4014683809507075, 0.44574250489259504, 0.48667529602855475, 0.5244027308136016, 0.5590843652849752, 0.5908966345777673, 0.6200261851594943, 0.646663800253515, 0.6709992917111856, 0.6932174994446068, 0.7134953718688148, 0.7320000051369967, 0.7488874778115322, 0.7643023114862616, 0.7783774013421442, 0.7912342831102888, 0.8029836278805066, 0.8137258799680828, 0.8235519738780614, 0.8325440836870082, 0.8407763719476418, 0.848315715882464, 0.8552223966606091, 0.8615507434505169, 0.86734972816803, 0.8726635097861883, 0.8775319290590452, 0.881990955790681, 0.8860730915483938, 0.8898077311249439, 0.8932214862099893, 0.8963384747176142, 0.8991805790945392, 0.9017676767448664, 0.9041178454818871, 0.9062475466762752, 0.9081717885266916, 0.9099042716424985, 0.911457518904396, 0.9128429913605322, 0.9140711917244193, 0.9151517568671673, 0.9160935405397367, 0.9169046874202832, 0.9175926994561096, 0.9181644953580406, 0.9186264640059529, 0.9189845124364515, 0.919244109006137, 0.9194103222554487, 0.9194878559376507, 0.9194810806242794, 0.9193940622514208, 0.9192305879297956, 0.9189941893051646, 0.9186881637233864, 0.9183155934261031, 0.9178793629779883, 0.9173821751043827, 0.9168265650986263, 0.9162149139411188, 0.9155494602568778, 0.9148323112248297, 0.914065452540093, 0.9132507575198862, 0.9123899954342479, 0.9114848391343993, 0.910536872044098, 0.9095475945727266, 0.9085184300029346, 0.9074507299003877, 0.9063457790884848, 0.9052048002266883, 0.9040289580273716, 0.9028193631427169, 0.9015770757501927, 0.9003031088624309, 0.8989984313849101, 0.8976639709426717, 0.8963006164953314, 0.894909220757899, 0.8934906024433212, 0.8920455483412443, 0.8905748152461856, 0.8890791317471586, 0.8875591998897184, 0.8860156967204649, 0.8844492757231585, 0.8828605681548315, 0.8812501842895657, 0.8796187145769622, 0.8779667307217446, 0.8762947866904048, 0.8746034196503167, 0.8728931508463014, 0.8711644864192267, 0.8694179181708562, 0.8676539242788286, 0.8658729699653461, 0.8640755081228635, 0.8622619798998223, 0.8604328152492364, 0.8585884334427221, 0.8567292435523653, 0.8548556449026482, 0.8529680274944828, 0.8510667724032476, 0.8491522521525907, 0.8472248310656291, 0.845284865595054, 0.8433327046335469, 0.8413686898058123, 0.8393931557434317, 0.837406430343669, 0.8354088350132718, 0.8334006848982394, 0.8313822891004684, 0.8293539508821156, 0.8273159678584638, 0.8252686321800285, 0.8232122307045806, 0.8211470451597288, 0.8190733522966541, 0.8169914240355506, 0.8149015276032935, 0.8128039256638157, 0.8106988764416506, 0.8085866338390586, 0.8064674475471384, 0.8043415631512913, 0.8022092222313851, 0.8000706624569439, 0.7979261176776656, 0.7957758180095561, 0.7936199899169392, 0.7914588562906025, 0.7892926365223059, 0.7871215465758773, 0.7849457990550972, 0.7827656032685706, 0.780581165291766, 0.7783926880263887, 0.7762003712572535, 0.7740044117068033, 0.7718050030874167, 0.7696023361516335, 0.7673965987404283, 0.7651879758296426, 0.7629766495746888, 0.7607627993536288, 0.7585466018087232, 0.7563282308865409, 0.7541078578767179, 0.7518856514494409, 0.7496617776917367, 0.7474364001426316, 0.7452096798272545, 0.7429817752899391, 0.7407528426263903, 0.7385230355149651, 0.7362925052471225, 0.7340614007570908, 0.731829868650796, 0.7295980532340972, 0.7273660965403664, 0.725134138357453, 0.7229023162540662, 0.7206707656056096, 0.7184396196195006, 0.716209009359999, 0.7139790637725802, 0.7117499097078703, 0.7095216719451716, 0.7072944732156027, 0.7050684342248682, 0.7028436736756843, 0.7006203082898748, 0.6983984528301548, 0.6961782201216217, 0.6939597210729628, 0.6917430646973997, 0.6895283581333777, 0.6873157066650141, 0.6851052137423199, 0.6828969810011978, 0.6806911082832358, 0.6784876936552967, 0.6762868334289197, 0.6740886221795346, 0.6718931527655034, 0.6697005163469886, 0.6675108024046608, 0.6653240987582468, 0.6631404915849265, 0.6609600654375811, 0.6587829032628988, 0.6566090864193411, 0.6544386946949754, 0.6522718063251733, 0.650108498010182, 0.6479488449325692, 0.6457929207745453, 0.6436407977351644, 0.6414925465474058, 0.6393482364951404, 0.6372079354299793, 0.635071709788012, 0.6329396246064289, 0.6308117435400353, 0.6286881288776534, 0.6265688415584163, 0.6244539411879532, 0.6223434860544662, 0.6202375331447013, 0.6181361381598106, 0.6160393555311094, 0.6139472384357282, 0.6118598388121552, 0.6097772073756776, 0.6076993936337132, 0.6056264459010395, 0.6035584113149146, 0.6014953358500934, 0.5994372643337396, 0.597384240460228, 0.5953363068058445, 0.5932935048433767, 0.591255874956601, 0.5892234564546605, 0.587196287586336, 0.5851744055542123, 0.583157846528734, 0.5811466456621557, 0.5791408371023824, 0.5771404540067039, 0.5751455285554189, 0.5731560919653504, 0.5711721745032534, 0.5691938054991122, 0.5672210133593286, 0.5652538255798002, 0.5632922687588896, 0.561336368610282, 0.5593861499757343, 0.5574416368377125, 0.5555028523319187, 0.5535698187597081, 0.5516425576003943, 0.549721089523444, 0.5478054344005611, 0.5458956113176588, 0.5439916385867225, 0.5420935337575581, 0.5402013136294337, 0.538314994262606, 0.536434590989739, 0.5345601184272095, 0.5326915904863025, 0.5308290203842964, 0.5289724206554357, 0.527121803161796, 0.5252771791040362, 0.5234385590320412, 0.5216059528554556, 0.5197793698541066, 0.5179588186883178, 0.5161443074091137, 0.5143358434683157, 0.5125334337285288, 0.5107370844730211, 0.5089468014154934, 0.5071625897097438, 0.5053844539592226, 0.5036123982264826, 0.5018464260425216, 0.5000865404160185, 0.49833274384246595, 0.4965850383131958, 0.4948434253243013, 0.49310790588545445, 0.49137848052862015, 0.48965514931666715, 0.48793791185187685, 0.48622676728434955, 0.48452171432030927, 0.48282275123030804, 0.48112987585733086, 0.479443085624798, 0.47776237754447204, 0.4760877482242637, 0.4744191938759411, 0.4727567103227415, 0.4711002930068862, 0.4694499369970002, 0.46780563699543665, 0.46616738734550556, 0.4645351820386104, 0.46290901472129037, 0.4612888787021702, 0.4596747669588189, 0.4580666721445167, 0.456464586594932, 0.454868502334709, 0.4532784110839655, 0.45169430426470336, 0.45011617300713114, 0.4485440081559004, 0.4469778002762554, 0.44541753966009806, 0.44386321633196846, 0.4423148200549415, 0.44077234033644036, 0.4392357664339683, 0.4377050873607582, 0.43618029189134266, 0.43466136856704285, 0.4331483057013788, 0.43164109138540174, 0.4301397134929475, 0.4286441596858145, 0.427154417418865, 0.42567047394505064, 0.42419231632036364, 0.4227199314087149, 0.4212533058867377, 0.4197924262485206, 0.41833727881026694, 0.4168878497148861, 0.41544412493651184, 0.4140060902849539, 0.4125737314100793, 0.41114703380612716, 0.40972598281595535, 0.40831056363522183, 0.40690076131649994, 0.40549656077332913, 0.4040979467842014, 0.4027049039964848, 0.4013174169302834, 0.39993546998223756, 0.3985590474292598, 0.3971881334322134, 0.39582271203952946, 0.39446276719076545, 0.39310828272010556, 0.39175924235980336, 0.3904156297435678, 0.38907742840989246, 0.38774462180533004, 0.3864171932877117, 0.38509512612931196, 0.3837784035199608, 0.3824670085701025, 0.38116092431380244, 0.37986013371170263, 0.37856461965392635, 0.37727436496293265, 0.37598935239632125, 0.3747095646495889, 0.37343498435883704, 0.37216559410343264, 0.37090137640862125, 0.3696423137480941, 0.3683883885465098, 0.3671395831819703, 0.36589587998845313, 0.3646572612581986, 0.3634237092440552, 0.3621952061617809, 0.3609717341923032, 0.3597532754839375, 0.3585398121545637, 0.35733132629376396, 0.35612779996491917, 0.3549292152072668, 0.3537355540379194, 0.3525467984538468, 0.3513629304338173, 0.3501839319403055, 0.34900978492136053, 0.34784047131244006, 0.3466759730382082, 0.3455162720142979, 0.3443613501490394, 0.34321118934515493, 0.34206577150141904, 0.3409250785142864, 0.3397890922794869, 0.3386577946935893, 0.3375311676555323, 0.3364091930681249, 0.33529185283951635, 0.3341791288846359, 0.3330710031266022, 0.3319674574981044, 0.3308684739427531, 0.3297740344164044, 0.32868412088845467, 0.3275987153431085, 0.32651779978061946, 0.3254413562185035, 0.3243693666927274, 0.3233018132588696, 0.32223867799325717, 0.3211799429940766, 0.32012559038246036, 0.3190756023035489, 0.3180299609275293, 0.31698864845064956, 0.31595164709621015, 0.3149189391155331, 0.31389050678890773, 0.3128663324265155, 0.3118463983693318, 0.31083068699000765, 0.3098191806937293, 0.30881186191905796, 0.30780871313874886, 0.30680971686055003, 0.3058148556279819, 0.3048241120210971, 0.30383746865722144, 0.30285490819167626, 0.301876413318482, 0.30090196677104414, 0.29993155132282073, 0.298965149787973, 0.2980027450219985, 0.2970443199223473, 0.2960898574290215, 0.2951393405251582, 0.29419275223759744, 0.2932500756374326, 0.29231129384054694, 0.2913763900081335, 0.2904453473472013, 0.2895181491110656, 0.2885947785998246, 0.2876752191608211, 0.2867594541890911, 0.2858474671277978, 0.28493924146865235, 0.28403476075232187, 0.28313400856882365, 0.28223696855790703, 0.2813436244094226, 0.2804539598636792, 0.2795679587117883, 0.2786856047959974, 0.27780688201001064, 0.27693177429929855, 0.27606026566139685, 0.2751923401461936, 0.2743279818562052, 0.27346717494684336, 0.272609903626669, 0.2717561521576386, 0.27090590485533866, 0.27005914608921083, 0.2692158602827672, 0.26837603191379683, 0.2675396455145616, 0.26670668567198386, 0.26587713702782484, 0.2650509842788544, 0.26422821217701153, 0.2634088055295571, 0.262592749199218, 0.26178002810432277, 0.2609706272189299, 0.2601645315729475, 0.25936172625224624, 0.2585621963987639, 0.25776592721060243, 0.2569729039421191, 0.2561831119040088, 0.2553965364633803, 0.25461316304382603, 0.25383297712548436, 0.2530559642450954, 0.2522821099960514, 0.25151140002843936, 0.2507438200490791, 0.24997935582155334, 0.24921799316623414, 0.24845971796030156, 0.24770451613775812, 0.24695237368943646, 0.24620327666300287, 0.24545721116295435, 0.24471416335061127, 0.2439741194441044, 0.24323706571835754, 0.24250298850506463, 0.24177187419266263, 0.2410437092262994, 0.2403184801077972, 0.23959617339561165, 0.2388767757047864, 0.23816027370690362, 0.23744665413002983, 0.23673590375865852, 0.2360280094336479, 0.23532295805215553, 0.23462073656756843
};

unsigned long previousMillis = 0;
unsigned long samplingInterval = 100;  //in ms
unsigned long previousMillis_monitoring = 0;
unsigned long monitoringInterval = 5 * 1000;  // every 5 secs

void setup() {
  // put your setup code here, to run once:

  // ADC resolution defaults to 10 bits for Arduino compatibility.
  // https://www.arduino.cc/reference/en/language/functions/zero-due-mkr-family/analogreadresolution/
  // set to 16bits
  analogReadResolution(16);

  // Allocate the memory for all audio connections.
  // The numberBlocks input specifies how much memory to reserve for audio data. Each block holds 128 audio samples
  AudioMemory(10);  // tested with AudioMemoryUsageMax()

  // Configure the window algorithm to use, for avoiding spectral leakage effect
  fft1024_1.windowFunction(AudioWindowHanning1024);

  Serial.begin(115200);
}

void loop() {
  // put your main code here, to run repeatedly:

  unsigned long currentMillis_monitoring = millis();
  if(currentMillis_monitoring - previousMillis_monitoring > monitoringInterval) {
    previousMillis_monitoring = currentMillis_monitoring;
  //monitoring system usage
  Serial.print("Max audio mem used: ");
  Serial.print(AudioMemoryUsageMax());
  Serial.print(" cpu usage max: ");
  Serial.println(AudioProcessorUsageMax());
  }


  // ---------  SPL from FFT -----------------------
  // - apply window function (e.g. Hann or Hamming)
  // - calculate FFT
  // - calculate magnitude of FFT (sqrt(re*re+im*im))
  // - convert magnitude to dB (20*log10(magnitude))

  unsigned long currentMillis = millis();
  if(currentMillis - previousMillis > samplingInterval) {
    previousMillis = currentMillis;

    if (fft1024_1.available()) {
      float v[512] = {0};
      magnitude = 0;

      for (int i=0; i<512; i++){
        // The FFT1024 feature in the Teensy audio lib deals only with ordinary real numbers.
        // Internally it's feeding audio data into the FFT as real numbers. The imaginary part of the input is set to zero.
        // The FFT math gives a complex (real+imaginary) number output for each frequency bin.
        // Conceptually, each frequency has an amplitude (or "magnitude" would be the more mathematically correct term)
        // and a phase shift which is relative to the 23.2 ms time period where the analysis was done.
        // That is *why* FFT output must be real+imaginary numbers; you simply can't represent amplitude *and* phase shift with a single number!
        // The audio library's FFT1024 is written with the assumption you're doing music visualization or
        // other spectral analysis where you only care about how intense each frequency bin is, but you couldn't care less
        // about the relative timing or phase shift between each frequency bin. So it combines the real & imaginary numbers
        // into only a single "magnitude" output for each bin. The downside is you can't get the phase info (at least not using the
        //  simple object from the library) but the library is simpler to use for most ordinary projects where the phase info isn't important.
        // FFT has a special property if you give it only real numbers input (the imaginary part of all 1024 inputs are zero)
        v[i] = fft1024_1.read(i) * a_weighting_curve[i]; // Read frequency bins. The result is scaled so 1.0 represents a full scale sine wave.
        // The term bins is related to the result of the FFT, where every element in the result array is a bin.
        // One can say this is the “resolution” of the FFT. Every bin represent a frequency interval, just like a histogram.
        // The number of bins you get is half the amount of samples spanning the frequency range from zero to half the sampling rate
        magnitude = magnitude + sq(v[i]); //
      } // end of for

      magnitude = sqrt(magnitude);
      dB = log10f(magnitude) * 20  + 125.05;  // db = 20(log A/Aref)
      Serial.print("db = ");
      Serial.println(dB,2);
    } // end of if fft

  } // end of if millis

}
